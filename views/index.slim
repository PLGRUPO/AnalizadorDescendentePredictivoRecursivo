/ Importamos y configuramos MathJax
script type='text/javascript' src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"
script[type="text/x-mathjax-config"]
  | MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}}); 

h1 Predictive Recursive Descent Parser

#description
  | Recuerde que una gramática $G$ es una cuaterna $G =(\Sigma,V,P,S)$.
  ol
    li
      | $\Sigma$ es el conjunto de <i>terminales</i>.
    li
      | $V$ es un conjunto (disjunto de $\Sigma$) que se denomina conjunto de
      |  <i>variables sintácticas</i> o <i>categorías gramaticales</i>,
    li
      | $P$ es un conjunto de pares de $V \times (V \cup \Sigma )^*$.
      |   En vez de escribir un par usando la notación $(A, \alpha) \in
      |   P$ se escribe $A \rightarrow \alpha$. Un elemento de $P$ se
      |   denomina <i>producción</i>.
    li
      | Por último, $S$ es un símbolo del conjunto $V$ que se denomina símbolo de arranque.
    br
      | Dada una gramática $G=(\Sigma,V,P,S)$ se denota por $L(G)$ o lenguaje
      |  generado por $G$ al lenguaje: <br/>
    .centered
        | $L(G) = \{ x \in \Sigma^* : S \stackrel{*}{\Longrightarrow} x \}$
    br
      | Esto es, el lenguaje generado por la gramática $G$ está
        formado por las cadenas de terminales que pueden ser <i>derivados</i>
      |  desde el símbolo de arranque.

  | Esta es la gramática para nuestra práctica:

  ol
    li
      | $\Sigma = \{ ; =, ID, P, IF, THEN, <, >, <=, >=, ==, !=, +, *, (, ), NUM \}$,
    li
      | $V = \{ statements, statement, condition, expression, term, factor \}$
    li
      | Productions:
      ol
        li
          | statements $ \rightarrow$ statement ';' statements $\vert$ statement
        li
          | statement $ \rightarrow$ ID '=' expression $\vert$ P expression
          | $ \vert$ IF condition THEN statement
        li
          | condition $ \rightarrow$ expression ('=='|'!='|'<'|'<='|'>'|'>=') expression
        li
          | expression $ \rightarrow$ term '+' expression $\vert$ term
        li
          | term $ \rightarrow$ factor '*' term $\vert$ factor
        li
          | factor $ \rightarrow$ '(' expression ')' $\vert$ ID $ \vert$ NUM
    li
      | Start symbol: $statements$ 


#dragandrophandler Drag &amp; Drop Files Here
#contentleft
  h2 Files
  #fl.filelist
    ul#ulfilelist
      - @Filo_user.each do |c|
        li id=c.id onclick="replacecode('#{ c.to_json(only: [:content]) }')"= c.id      
  div
    button#PARSE Parse

javascript:
  $( document ).ready(function() {
    var editor = CodeMirror.fromTextArea($('#INPUT')[1], {
      mode: "javascript",
      lineNumbers: true,
      lineWrapping: true,
      extraKeys: {"Ctrl-Q": function(cm){ cm.foldCode(cm.getCursor()); }},
      foldGutter: true,
      gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"]
    });
    editor.foldCode(CodeMirror.Pos(11, 4));
    editor.html("a=rrrrrrrr");
  });
  
  
#contentright
  h2 Input
  form style='height: 100%;' action="#{action}" method="POST"
    textarea#INPUT spellcheck="false" name="INPUT" value="#{c.content}"
      |  a = 5
    button#savebutton type='submit' Save

#outputdiv style='display: none;'
  #outputheader Tokens found
  pre#OUTPUT 
